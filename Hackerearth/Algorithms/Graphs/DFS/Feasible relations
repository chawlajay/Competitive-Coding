/*
 * Author   :   jignesh1604
 * College  :   SVNIT
 * Link     :   https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/practice-problems/algorithm/feasible-relations/
 */
 
 
#include<bits/stdc++.h>
using namespace std;
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
 
#define pb push_back
#define sz size()
#define ff first
#define ss second
#define ll long long int
#define ld long double
#define bp __builtin_popcountll
#define FOR(i,a,b) for(i=a;i<b;i++)
#define ROR(i,a,b) for(i=a;i>b;i--)
#define FORE(i,a,b) for(i=a;i<=b;i++)
#define RORE(i,a,b) for(i=a;i>=b;i--)
#define pii pair<int,int>
#define pll pair<ll,ll>
const ll M=1e9+7;
 
bool sortbysec(const pair<double,ll> &a,const pair<double,ll> &b)
{
    return true;
}

vector<vector<int>> adj;
vector<bool> visited;
// int ide=0;
vector<pair<int,int>> badedge;
vector<int> cc;

void dfs(int node,int id)
{
    visited[node]=true;
    cc[node]=id;
    int i;
    FOR(i,0,adj[node].sz)
    {
        int child=adj[node][i];
        if(!visited[child])
        {
            dfs(child,id);
        }
    }
}

void components(int n)
{
    int i;
    FORE(i,1,n)
    {
        if(!visited[i])
        {
            // ide++;
            dfs(i,i);
        }
    }
}

int main()
{
    FAST;
    int t;
    cin>>t;
    while(t--)
    {
        int n,k,i,x,y;
        cin>>n>>k;
        adj=vector<vector<int>>(n+1);
        cc=vector<int>(n+1);
        visited=vector<bool>(n+1);
        FORE(i,1,n)
        {
            cc[i]=i;
        }
        string s;
        FOR(i,0,k)
        {
            cin>>x>>s>>y;
            if(s=="=")
            {
                adj[x].pb(y);
                adj[y].pb(x);
            }
            else 
            {
                badedge.pb(make_pair(x,y));
            }
        }
        components(n);
        int flag=0;
        FOR(i,0,badedge.sz)
        {
            if(cc[badedge[i].first]==cc[badedge[i].second])
            {
                flag=1;
                break;

            }
        }
        // FORE(i,1,n)
        // {
        //     cout<<cc[i]<<" ";
        // }
        if(flag==0) cout<<"YES\n";
        else cout<<"NO\n";
        adj.clear();
        visited.clear();
        cc.clear();
        badedge.clear();
        // ide=0;
    }
}
