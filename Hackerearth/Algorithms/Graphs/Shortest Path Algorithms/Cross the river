/*
 * Author   :   jignesh1604
 * College  :   SVNIT
 * Link     :   https://www.hackerearth.com/practice/algorithms/graphs/shortest-path-algorithms/practice-problems/algorithm/cross-the-river-052be366/description/
 */


#include<bits/stdc++.h>
using namespace std;
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);

#define pb push_back
#define sz size()
#define ff first
#define ss second
#define ll long long int
#define ld long double
#define bp __builtin_popcountll
#define FOR(i,a,b) for(i=a;i<b;i++)
#define ROR(i,a,b) for(i=a;i>b;i--)
#define FORE(i,a,b) for(i=a;i<=b;i++)
#define RORE(i,a,b) for(i=a;i>=b;i--)
#define pii pair<int,int>
#define pll pair<ll,ll>
const int M=1e9+7;


vector<vector<pll>> adj;
vector<bool> visited;
vector<ll> dist;

void dijkstra(ll node)
{
    dist[node] = 0;
    multiset < pll > st;
    st.insert({0,node});            // (distance , vertex)
    while(!st.empty())
    {
        pll p = *st.begin();
        st.erase(st.begin());
        ll ver = p.second , wei = p.first ;
        if(visited[ver] == true)    continue;
        visited[ver] = true;
        ll i;
        FOR(i,0,adj[ver].sz)
        {
            ll vertex = adj[ver][i].first , w = adj[ver][i].second ;
            if(dist[ver] + w < dist[vertex])
            {
                dist[vertex] = dist[ver] + w;
                st.insert({dist[vertex],vertex});
            }
        }
    }
}

int main()
{
    FAST;
    ll t;
    cin>>t;
    while(t-->0)
    {
        ll n,i,j;
        cin >> n;
        ll x[n] , y[n] , r[n] ;
        FOR(i,0,n)
        {
            cin >> x[i] >> y[i] >> r[i] ;
        }
        adj = vector< vector <pll> > (n+5);
        visited = vector< bool > (n+5);
        dist = vector< ll > (n+5);
        fill(dist.begin(),dist.end(),INT_MAX);
        ll a, b;
        cin >> a >> b;

        FOR(i,0,n)
        {
            FOR(j,0,n)
            {
                ll dist1 = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]) ;
                ll dist2 = (r[i] + r[j]) * (r[i] + r[j]) ;
                if(dist1 <= dist2)
                {
                    adj[i].pb({j,1});
                    adj[j].pb({i,1});
                }

            }
            if(abs(y[i] - b) <= r[i])
            {
                adj[n].pb({i,1});
                adj[i].pb({n,1});
            }
            if(abs(y[i] - a) <= r[i])
            {
                adj[n+1].pb({i,1});
                adj[i].pb({n+1,1});
            }
        }
        dijkstra(n);

        if(dist[n+1] == INT_MAX)
            cout << -1 << "\n";
        else 
            cout << dist[n+1]-1 << "\n";
    }
}
