/*
 * Author   :   jignesh1604
 * College  :   SVNIT
 * Link     :   https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/algorithm/social-networking-graph/
 */
 
 
#include<bits/stdc++.h>
using namespace std;
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
 
#define pb push_back
#define sz size()
#define ff first
#define ss second
#define ll long long int
#define ld long double
#define bp __builtin_popcountll
#define FOR(i,a,b) for(i=a;i<b;i++)
#define ROR(i,a,b) for(i=a;i>b;i--)
#define FORE(i,a,b) for(i=a;i<=b;i++)
#define RORE(i,a,b) for(i=a;i>=b;i--)
#define pii pair<int,int>
#define pll pair<ll,ll>
const ll M=1e9+7;
 
bool isprime(ll n)
{
    for(ll i=2;i<=sqrt(n);i++)
    {
        if(n%i==0)
            return false;
    }
    return true;
}
 
bool sortbysec(const pair<ll,ll> &a,const pair<ll,ll> &b)
{
    if(a.first<b.first)
        return true;
    else if(a.first==b.first)
    {
        if(a.second<b.second)
            return true;
        else 
            return false;
    }
    else 
        return false;
}
 
// fflush(stdout)

vector<vector<ll>> v;
vector<bool> visited;

void bfs(ll node,ll c)
{
    queue<pll> q,fin;
    q.push(make_pair(node,(ll)0));
    visited[node]=true;
    ll i,ans=0,p=0;
    while(!q.empty())
    {
        ll child=q.front().first,val=q.front().second;
        fin.push(make_pair(q.front().first,q.front().second));
        q.pop();
        FOR(i,0,v[child].sz)
        {
            if(!visited[v[child][i]])
            {
                q.push(make_pair(v[child][i],val+1));
                visited[v[child][i]]=true;
            }
            
        
        }
    }
    while(!fin.empty())
    {
        if(fin.front().second==c)
            p++;
        fin.pop();
    }
    cout<<p<<"\n";
}

int main()
{
    FAST;
    ll n,e,i,j,m,x,y;
    cin>>n>>e;
    v=vector<vector<ll>>(n+1);
    while(e--)
    {
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
    }
    cin>>m;
    while(m--)
    {
        cin>>x>>y;
        visited=vector<bool> (n+1);
        bfs(x,y);
    }
}
