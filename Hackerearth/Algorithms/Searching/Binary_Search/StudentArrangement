/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/student-arrangement-6/description/
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class StudentArrangement {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , m , k , i , j , x , ans = 0;
	    in >> n >> m >> k;
	    set<long long int> st;
	    long long int a[100001] = {};
	    for(i = 1 ; i <= m ; i++) {
	        st.insert(i);
	    }
        while(n-- > 0) {
            in >> x;
            if(st.empty()) {
                ans++;
            }
            else if(st.lower_bound(x) != st.end()) {
                j = *st.lower_bound(x);
                if(j != x) {
                    ans++;
                }
                a[j] += 1;
                if(a[j] >= k) {
                    st.erase(j);
                }
            }
            else if(st.lower_bound(*st.begin()) != st.end()) {
                j = *st.lower_bound(*st.begin());
                if(j != x) {
                    ans++;
                }
                a[j] += 1;
                if(a[j] >= k) {
                    st.erase(j);
                }
            }
            else {
                ans++;
            }
        }
        out << ans << "\n";
	}
};


int main() {
	StudentArrangement solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
