/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/d-30/description/?layout=old
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class TheSoapMystery {
public:
    long long int fun(long long int a[] , long long int n , long long int x) {
        long long int l = 0 , r = n-1 , ans = n;
        while(l <= r) {
            long long int mid = (l+r)/2;
            if(a[mid] < x) {
                l = mid+1;
            }
            else {
                ans = mid;
                r = mid-1;
            }
        }
        return ans;
    }
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , i;
	    in >> n;
	    long long int a[n+1];
	    for(i = 0; i < n ; i++) {
	        in >> a[i];
	    }
	    sort(a , a+n);
	     long long int q , x , l , r , ans = -1;
	     in >> q;
	     while(q-- > 0) {
	         in >> x;
	         out << fun(a , n , x) << "\n";
	     }
	}
};


int main() {
	TheSoapMystery solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
