/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://www.codechef.com/problems/EXAM
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;
long long int a[1005] , t[1005] , dp[1005][10005][2];
class MaximizingMarks {
public:
    long long int fun(long long int n , long long int m , long long int x) {
        if(dp[n][m][x] != -1) {
            return dp[n][m][x];
        }
        if(n == 0 || m == 0) {
            return 0;
        }
        if(t[n-1] > m) {
            dp[n][m][x] = fun(n-1 , m , x);
        }
        else {
            long long int p = fun(n-1 , m , x) , y = 0;
            if(x == 0) {
                if(m-t[n-1] >= 0)
                    y = max(2*a[n-1] + fun(n-1 , m - t[n-1] , 1) , a[n-1] + fun(n-1 , m - t[n-1] , 0));
            }
            else {
                if(m-t[n-1] >= 0)
                    y = a[n-1] + fun(n-1 , m - t[n-1] , x);
            }
            dp[n][m][x] = max(p , y);
        }
        return dp[n][m][x];
    }
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , i , m , j;
	    for(i = 0 ; i < 1003 ; i++) {
	        for(j = 0 ; j < 10003 ; j++) {
	            dp[i][j][0] = -1;
	            dp[i][j][1] = -1;
	        }
	    }
        in >> n >> m;
        for(i = 0 ; i < n ; i++) {
            in >> a[i];
        }
        for(i = 0 ; i < n ; i++) {
            in >> t[i];
        }
        out << fun(n , m , 0);
	}
};


int main() {
	MaximizingMarks solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
