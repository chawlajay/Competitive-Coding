/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/706/problem/C?csrf_token=b92c249f6cd795d9912d1e4d2121ad0d
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CHardProblem {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , i ,j ;
	    in >> n ;
	    long long int a[n+ 1] ;
	    for(i = 0 ; i < n ; i++) {
	        in >> a[i] ;
	    }
	    string s[n + 1] ;
	    for(i = 0 ; i < n ; i++) {
	        in >> s[i] ;
	    }
	    long long int dp[n+1][2] ;
	    for(i = 0 ; i < n ; i++) {
	        dp[i][0] = LLONG_MAX ;
	        dp[i][1] = LLONG_MAX ;
	    }
	    dp[0][0] = 0 ;
        dp[0][1] = a[0] ;
	    for(i = 1 ; i < n ; i++) {
	        string t = s[i - 1] , d = s[i] ;
	        reverse(t.begin() , t.end()) ;
	        reverse(d.begin() , d.end()) ;
	        if(s[i] >= s[i-1] && dp[i-1][0] != LLONG_MAX) {
	            dp[i][0] = min(dp[i-1][0] , dp[i][0]) ;
	        }
	        if(s[i] >= t && dp[i-1][1] != LLONG_MAX) {
	            dp[i][0] = min(dp[i-1][1] , dp[i][0]) ;
	        }
	        if(d >= s[i-1] && dp[i-1][0] != LLONG_MAX) {
	            dp[i][1] = min(dp[i-1][0] + a[i] , dp[i][1]) ;
	        }
	        if(d >= t && dp[i-1][1] != LLONG_MAX) {
	            dp[i][1] = min(dp[i-1][1] + a[i] , dp[i][1]) ;
	        }
	        if(s[i] < s[i-1] && s[i] < t && d < s[i-1] && d < t) {
	            out << -1 << "\n" ;
	            return ;
	        }
	    }
	    if(dp[n-1][0] == LLONG_MAX && dp[n-1][1] == LLONG_MAX) {
	        out << -1 << "\n" ;
	        return ;
	    }
	    if(dp[n-1][0] == LLONG_MAX && dp[n-1][1] == LLONG_MAX) {
	        out << -1 << "\n" ;
	        return ;
	    }
	    out << min(dp[n-1][0] , dp[n-1][1]) << "\n" ;
	}
};


int main() {
	CHardProblem solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
