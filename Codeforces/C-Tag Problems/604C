/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/604/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CAlternativeThinking {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , i , j ;
	    in >> n ;
	    string s ;
	    in >> s ;
	    long long int dp[2] = {} ;
	    if(s[0] == '0') {
	        dp[0] = 1 ;
	    }
	    else {
	        dp[1] = 1 ;
	    }
	    for(i = 1 ; i < s.size() ; i++) {
	        if(s[i] == '0') {
	            dp[0] = dp[1] + 1 ;
	        }
	        else {
	            dp[1] = dp[0] + 1 ;
	        }
	    }
	    long long int ans = 0 ;
	    for(i = 0 ; i < n - 1 ; i++) {
	        if(s[i] != s[i+1]) {
	            ans++ ;
	        }
	    }
        out << min(n , max(dp[0] , dp[1]) + 2)  << "\n" ;
	}
};


int main() {
	CAlternativeThinking solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
