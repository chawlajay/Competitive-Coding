/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/378/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CMaze {
public:
    map<pair<long long int , long long int > , vector<pair<long long int , long long int > > > adj ;
    map<pair<long long int , long long int > , bool > visited ;
    string s[501] ;
    long long int nl = 0;
    void dfs(pair<long long int , long long int> node ) {
        if(nl > 0) {
            visited[node] = true;
            long long int i;
            nl = nl - 1;
            s[node.first][node.second] = '1' ;
            for (i = 0; i < adj[node].size(); i++) {
                pair<long long int, long long int> child = adj[node][i];
                if (!visited[child] && nl > 0) {
//                    nl = nl - 1;
                    dfs(child);
//                    cout << "jay mataji\n" ;
                }
            }
        }
    }

	void solve(std::istream& in, std::ostream& out) {
	    long long int n , m , i , j , k , num = 0 ;
	    in >> n >> m >> k ;
//	    string s[n+1] ;
        pair<long long int , long long int > p ;
	    for(i = 0 ; i < n ; i++) {
	        in >> s[i] ;
	    }
	    for(i = 0 ; i < n ; i++) {
	        for(j = 0 ; j < m ; j++) {
	            visited[{i,j}] = false ;
	            if(s[i][j] == '.') {
	                p = {i,j};
	                num++;
	                if(i > 0 && s[i-1][j] == '.') {
	                    adj[{i,j}].push_back({i-1,j}) ;
	                }
                    if(i < n-1 && s[i+1][j] == '.') {
                        adj[{i,j}].push_back({i+1,j}) ;
                    }
                    if(j > 0 && s[i][j-1] == '.') {
                        adj[{i,j}].push_back({i,j-1}) ;
                    }
                    if(j < m-1 && s[i][j+1] == '.') {
                        adj[{i,j}].push_back({i,j+1}) ;
                    }
	            }
	        }
	    }
	    nl = num - k;
        dfs(p) ;

	    for(i = 0 ; i < n ; i++) {
	        for(j = 0 ; j < m ; j++) {
	            if(s[i][j] == '.') {
	                s[i][j] = 'X' ;
	            }
	        }
	    }
        for(i = 0 ; i < n ; i++) {
            for(j = 0 ; j < m ; j++) {
                if(s[i][j] == '1') {
                    s[i][j] = '.' ;
                }
            }
        }
        for(i = 0 ; i < n ; i++) {
            out << s[i] << "\n" ;
        }
	}
};


int main() {
	CMaze solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
