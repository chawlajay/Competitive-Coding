/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/466/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CNumberOfWays {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , i , j , ans = 0;
	    in >> n;
	    long long int a[n+1] , pre[n+1] , suf[n+1] , sums[n+1];
	    for(i = 0 ; i < n ; i++) {
	        in >> a[i];
	        if(i == 0) {
	            pre[i] = a[i];
	        }
	        else {
	            pre[i] = pre[i-1] + a[i];
	        }
	    }
	    if(pre[n-1] % 3 != 0) {
	        out << 0 << "\n";
	        return;
	    }
	    for(i = n-1 ; i >= 0 ; i--) {
	        if(i == n-1) {
	            suf[i] = a[i];
	        }
	        else {
	            suf[i] = suf[i+1] + a[i];
	        }
	    }
	    for(i = n-1 ; i >= 0 ; i--) {
	        if(i == n-1) {
	            if(suf[i] == pre[n-1]/3) {
	                sums[i] = 1;
	            }
	            else {
	                sums[i] = 0;
	            }
	        }
	        else {
	            if(suf[i] == pre[n-1]/3) {
	                sums[i] = sums[i+1] + 1;
	            }
	            else {
	                sums[i] = sums[i+1];
	            }
	        }
	    }
	    for(i = 0 ; i < n-2 ; i++) {
	        if(pre[i] == pre[n-1]/3) {
	            ans += sums[i+2];
	        }
	    }
	    out << ans << "\n";

	}
};


int main() {
	CNumberOfWays solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
