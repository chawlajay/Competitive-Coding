/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/1348/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CPhoenixAndDistribution {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int t;
	    in >> t;
	    while(t-- > 0) {
	        long long int n , k , i , j;
	        in >> n >> k;
	        string s;
	        in >> s;
	        sort(s.begin() , s.end());
	        if(s[0] != s[k-1]) {
	            out << s[k-1] << "\n";
	        }
	        else {
	            set<char> st;
	            string d = "";
	            d += s[0];
	            for(i = k ; i < n ; i++) {
	                st.insert(s[i]);
	            }
	            if(st.size() == 1) {
	                for(i = k ; i < n ; i += k) {
	                    d += s[i];
	                }

	            }
	            else {
	                for(i = k ; i < n ; i++) {
	                    d += s[i];
	                }
	            }
	            out << d << "\n";
	        }
	    }
	}
};


int main() {
	CPhoenixAndDistribution solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
