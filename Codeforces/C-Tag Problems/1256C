/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * link : https://codeforces.com/contest/1256/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CPlatformsJumping {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , m , i , d , pos;
	    in >> n >> m >> d;
	    vector<long long int> c(n+3);
	    for(i = 0 ; i < n ; i++) {
	        in >> c[i];
	    }
	    vector<long long int> ans(n+3 , 0);
	    for(i = m-1 , pos = n ; i >= 0 ; i--) {
	        for(long long int len = 0 ; len < c[i] ; len++) {
	            ans[pos - len] = i+1;
	        }
	        pos -= c[i];
	    }

	    long long int now = 0;
	    while(true) {
	        while(now + 1 < n+1 && ans[now+1] > 0) {
	            now++;
	        }
	        if(now + d >= n+1) break;
	        if(ans[now+d] == 0) {
	            long long int lpos = -1;
	            for(i = now+d ; i < n+2 ; i++) {
	                if(ans[i] != 0) {
	                    lpos = i;
	                    break;
	                }
	            }
	            if(lpos == -1) {
	                out << "NO\n";
	                return;
	            }
	            long long int rpos = -1;
	            for(i = lpos ; i < n+2 ; i++) {
	                if(ans[i] == ans[lpos]) {
	                    rpos = i;
	                }
	            }
	            while(ans[now + d] == 0) {
	                swap(ans[lpos - 1] , ans[rpos]);
	                lpos--;
	                rpos--;
	            }
	        }
            now += d;
	    }
	    out << "YES\n";
	    for(i = 1 ; i <= n ; i++) {
	        out << ans[i] << " ";
	    }
	}
};


int main() {
	CPlatformsJumping solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
