/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/431/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

long long int dp[201][2] , d , k;

class CKTree {
public:
    const long long int M = 1e9 + 7;
    long long int solve(long long int n , long long int check) {
        if(dp[n][check] != -1) {
            return dp[n][check];
        }
        if(n == 0) {
            if(check == 1) return 1;
            else return 0;
        }
        long long int ans = 0;
        for(long long int i = 1 ; i <= k ; i++) {
            if(n-i >= 0) {
                if(i >= d) {
                    ans = ((ans%M) +  (solve(n - i , min((long long int)1 , check+1))%M))%M;
                }
                else {
                    ans = ((ans%M) + (solve(n - i , check)%M))%M;
                }
            }
        }
        dp[n][check] = ans%M;
        return ans%M;
    }
	void solve(std::istream& in, std::ostream& out) {
        long long int n;
        for(long long int i = 0 ; i < 201 ; i++) {
            dp[i][0] = -1;
            dp[i][1] = -1;
        }
        in >> n >> k >> d;
        out << solve(n , 0)%M;
	}
};


int main() {
	CKTree solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
