/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/75/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CModifiedGCD {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int a , b , i , j , n , x , y ;
	    in >> a >> b ;
	    set<long long int> st1 , fin , st2 ;
	    for(i = 1 ; i <= sqrt(a) ; i++) {
	        if(a%i == 0) {
	            st1.insert(i) ;
	        }
	    }
	    st1.insert(a) ;

        for(i = 1 ; i <= sqrt(b) ; i++) {
            if(b%i == 0) {
                st2.insert(i) ;
            }
        }
        st2.insert(b) ;
        for(auto x : st1) {
            if(st2.find(x) != st2.end()) {
                fin.insert(x) ;
            }
        }
        for(auto x : fin) {
            for(auto y : fin) {
                if(a%(x*y) == 0 && b%(x*y) == 0) {
                    fin.insert(x*y) ;
                }
            }
        }
	    in >> n ;
	    while(--n >= 0) {
	        in >> x >> y ;
	        auto add = fin.lower_bound(y) ;
	        if(*add == y) {
	            out << y << "\n" ;
	        }
	        else {
	            add-- ;
	            if(*add >= x) {
	                out << *add << "\n" ;
	            }
	            else {
	                out << -1 << "\n" ;
	            }
	        }
	    }
	}
};


int main() {
	CModifiedGCD solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
