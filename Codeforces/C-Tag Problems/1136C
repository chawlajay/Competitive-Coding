/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/1136/problem/C
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CNastyaIsTransposingMatrices {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , m , i , j , flag = 0;
	    in >> n >> m;
	    long long int x;
	    map<long long int , vector<long long int>> mp1 , mp2;
	    for(i = 1 ; i <= n ; i++) {
	        for(j = 1 ; j <= m ; j++) {
	            in >> x;
	            mp1[i+j].push_back(x);
	        }
	    }
	    for(i = 1 ; i <= n ; i++) {
	        for(j = 1 ; j <= m ; j++) {
	            in >> x;
	            mp2[i+j].push_back(x);
	        }
	    }
	    for(i = 2 ; i <= n*m ; i++) {
	        sort(mp1[i].begin() , mp1[i].end());
	        sort(mp2[i].begin() , mp2[i].end());
	    }
	    for(auto p : mp1) {
	        for(j = 0 ; j < p.second.size() ; j++) {
	            if(p.second[j] != mp2[p.first][j]) {
	                out << "NO\n";
	                return;
	            }
	        }
	    }
	    out << "YES\n";

	}
};


int main() {
	CNastyaIsTransposingMatrices solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
