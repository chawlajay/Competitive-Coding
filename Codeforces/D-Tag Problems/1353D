/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/1353/problem/D
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;
long long int x = 0 , dp[200005];
class DConstructingTheArray {
public:
	void solve(std::istream& in, std::ostream& out) {
       int t;
       in >> t;
       while(t-- > 0) {
           long long int n , i = 1;
           in >> n;
           set<long long int> st;
           map<long long int , set<long long int>> mp;
           long long int a[n+1];
           memset(a , 0 , sizeof(a));
           st.insert(n);
           mp[n].insert(1ll);
           while(!st.empty()) {
               long long int x = *st.rbegin();
               st.erase(x);
               for(auto p : mp[x]) {
                   a[(x-1)/2 + p] = i;
                   i++;
                   if((x-1)/2 > 0) {
                       st.insert((x - 1) / 2);
                       mp[(x - 1) / 2].insert(p);
                   }
                   if(x - (x - 1) / 2 - 1 > 0) {
                       st.insert(x - (x - 1) / 2 - 1);
                       mp[x - (x - 1) / 2 - 1].insert((x - 1) / 2 + p + 1);
                   }
               }
               mp[x].clear();
           }
           for(i = 1 ; i <= n ; i++) {
               out << a[i] << " ";
           }
           out << "\n";
       }
	}
};


int main() {
	DConstructingTheArray solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
