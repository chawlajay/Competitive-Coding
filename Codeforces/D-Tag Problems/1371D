/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/1371/problem/D
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class DGrid00100 {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int t;
	    in >> t;
	    while(t-- > 0) {
	        long long int n , k , i , j , l;
	        in >> n >> k;
	        long long int a[n+5][n+5];
	        memset(a , 0 , sizeof(a));
	        long long int x = 0 , y = 0;
	        while(k-- > 0) {
	            a[x][y] = 1;
	            x = (x+1)%n;
	            y = (y+1)%n;
	            if(x == 0) {
	                y = (y+1)%n;
	            }
	        }
	        long long int rowmax = 0 , rowmin = n;
	        for(i = 0 ; i < n ; i++) {
	            long long int sum = 0;
	            for(j = 0 ; j < n ; j++) {
	                sum += a[i][j];
	            }
	            rowmax = max(rowmax , sum);
	            rowmin = min(rowmin , sum);
	        }

            long long int colmax = 0 , colmin = n;
            for(i = 0 ; i < n ; i++) {
                long long int sum = 0;
                for(j = 0 ; j < n ; j++) {
                    sum += a[j][i];
                }
                colmax = max(colmax , sum);
                colmin = min(colmin , sum);
            }
            out << (rowmax-rowmin)*(rowmax-rowmin) + (colmax - colmin)*(colmax - colmin) << "\n";
	        for(i = 0 ; i < n ; i++) {
	            for(j = 0 ; j < n ; j++) {
	                out << a[i][j] << "";
	            }
	            out << "\n";
	        }
	    }

	}
};


int main() {
	DGrid00100 solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
