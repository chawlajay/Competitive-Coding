/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/189/problem/A
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class ACutRibbon {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , a ,  b , c , i ;
	    in >> n >> a >> b >> c ;
	    long long int dp[4001] = {} ;
	    dp[a] = 1 ;
	    dp[b] = 1 ;
	    dp[c] = 1 ;
	    set<long long int> st ;
	    st.insert(a) ;
	    st.insert(b) ;
	    st.insert(c) ;
	    while(!st.empty()) {
	        i = *st.begin() ;
	        st.erase(st.begin()) ;
            if (i + a <= n) {
                dp[i + a] = max(dp[i + a], dp[i] + 1);
                st.insert(i+a);
            }
            if (i + b <= n) {
                dp[i + b] = max(dp[i + b], dp[i] + 1);
                st.insert(i+b);
            }
            if (i + c <= n) {
                dp[i + c] = max(dp[i + c], dp[i] + 1);
                st.insert(i+c);
            }
        }
	    out << dp[n] << "\n" ;

	}
};


int main() {
	ACutRibbon solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
