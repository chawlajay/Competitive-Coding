/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/1360/problem/F
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class FSpyString {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int t;
	    in >> t;
	    while(t-- > 0) {
	        int n , m , i , j , k , l , flag = 0;
	        in >> n >> m;
	        string s[n+1] , ans;
	        for(i = 0 ; i < n ; i++) {
	            in >> s[i];
	        }
	        string d = s[0];
	        for(i = 0 ; i < m ; i++) {
	            s[0] = d;
	            for(j = 0 ; j < 26 ; j++) {
	                s[0][i] = (char)(j+97);
	                int f = 0 , c;
	                for(k = 0 ; k < n ; k++) {
	                    c = 0;
	                    for(l = 0 ; l < m ; l++) {
	                        if(s[k][l] != s[0][l]) {
	                            c++;
	                        }
	                    }
	                    if(c > 1) {
	                        f = 1;
	                        break;
	                    }
	                }
	                if(f == 0) {
	                    flag = 1;
	                    ans = s[0];
	                    break;
	                }
	            }
	            if(flag == 1) {
	                break;
	            }
	        }
	        if(flag == 1) out << ans << "\n";
	        else out << "-1\n";
	    }

	}
};


int main() {
	FSpyString solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
