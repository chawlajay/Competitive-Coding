/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/534/problem/B
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BCoveredPath {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int i , j , v1 , v2 , t , d ;
	    in >> v1 >> v2 >> t >> d ;
	    long long int a[101] , b[101] ;
	    for(i = 0 ; i < t ; i++) {
	        if(i == 0) {
	            a[i] = v1 ;
	        }
	        else {
	            a[i] = a[i-1] + d ;
	        }
	    }
	    for(i = t-1 ; i >= 0 ; i--) {
	        if(i == t-1) {
	            b[i] = v2 ;
	        }
	        else {
	            b[i] = b[i+1] + d ;
	        }
	    }
	    long long int ans = 0 ;
	    for(i = 0 ; i < t ; i++)  {
	        ans += min(a[i] , b[i]) ;
	    }
	    out << ans << "\n" ;

	}
};


int main() {
	BCoveredPath solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
