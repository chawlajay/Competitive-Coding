/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/998/problem/B
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BCutting {
public:
	void solve(std::istream& in, std::ostream& out) {
	    long long int n , b , i , c = 0 , ans = 0 , sum = 0;
	    in >> n >> b;
	    long long int a[n+1];
	    for(i = 0 ; i < n ; i++) {
	        in >> a[i];
	    }
	    vector<long long int> v;
	    for(i = 0 ; i < n-1 ; i++) {
	        if(a[i] % 2 == 0) {
	            c++;
	        }
	        else {
	            c--;
	        }
	        if(c == 0) {
	            v.push_back(abs(a[i] - a[i+1]));
	        }
	    }
	    sort(v.begin() , v.end());
	    for(i = 0 ; i < v.size() ; i++) {
	        if(sum + v[i] > b) {
	            out << ans << "\n";
	            return;
	        }
	        else {
	            sum += v[i];
	            ans++;
	        }
	    }
	    out << ans << "\n";
	    return;

	}
};


int main() {
	BCutting solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
