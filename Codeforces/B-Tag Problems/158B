/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/158/problem/B
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BTaxi {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n , i , ans = 0 ;
	    in >> n ;
        stack<int> st1 , st2 , st3 , st4 ;
	    while(--n >= 0) {
	        in >> i ;
	        if(i == 1) st1.push(1) ;
	        if(i == 2) st2.push(2) ;
	        if(i == 3) st3.push(3) ;
	        if(i == 4) st4.push(4) ;
	    }
	    while(st1.size() > 0 && st3.size() > 0) {
	        ans++ ;
	        st1.pop() ;
	        st3.pop() ;
	    }
	    while(st2.size() > 1) {
	        ans++ ;
	        st2.pop() ;
	        st2.pop() ;
	    }
	    while(st4.size() > 0) {
	        ans++ ;
	        st4.pop() ;
	    }
	    while(st1.size() > 3) {
	        ans++ ;
	        st1.pop() ;
	        st1.pop() ;
	        st1.pop() ;
	        st1.pop() ;
	    }
	    while(st1.size() > 1 && st2.size() > 0) {
	        ans++ ;
	        st1.pop() ;
	        st1.pop() ;
	        st2.pop() ;
	    }
	    while(st1.size() > 0 && st2.size() > 0) {
	        st1.pop() ;
	        st2.pop() ;
	        ans++ ;
	    }
	    if(st1.size() > 0) {
	        ans++ ;
	    }
	    while(st2.size() > 0) {
	        ans++ ;
	        st2.pop() ;
	    }
	    while(st3.size() > 0) {
	        ans++ ;
	        st3.pop() ;
	    }
	    out << ans << "\n" ;
	}
};


int main() {
	BTaxi solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
