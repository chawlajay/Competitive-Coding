/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/1332/problem/B
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BCompositeColoring {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int t ;
	    in >> t ;
	    while(t--) {
	        long long int n , i , j , x ;
	        in >> n ;
	        map<long long int , vector<long long int>> mp ;
	        for(i = 0 ; i < n ; i++) {
	            in >> x ;
	            for(j = 2 ; j <= sqrt(x) ; j++) {
	                if(x % j == 0) {
	                    mp[j].push_back(i) ;
	                    break ;
	                }
	            }
	        }
	        long long int a[1001] , ans = 1;
	        out << mp.size() << "\n" ;
	        for(auto p : mp) {
	            for(i = 0 ; i < p.second.size() ; i++) {
	                a[p.second[i]] = ans ;
	            }
	            ans++ ;
	        }
	        for(i = 0 ; i < n ; i++) {
	            out << a[i] << " " ;
	        }
	        out << "\n" ;
	    }
	}
};


int main() {
	BCompositeColoring solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
