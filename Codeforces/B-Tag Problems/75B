/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link : https://codeforces.com/contest/75/problem/B
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

bool sortbysec(const pair<long long int , string> &a , const pair<long long int , string > &b ) {
    if(a.first > b.first) {
        return true ;
    }
    else if(a.first == b.first) {
        if(a.second < b.second) {
            return true ;
        }
        else {
            return false ;
        }
    }
    else {
        return false ;
    }
}

class BFacetookPriorityWall {
public:

	void solve(std::istream& in, std::ostream& out) {
	    string s[5] , name ;
	    long long int n , i , j ;
	    in >> name >> n ;
	    map<string , long long int> mp ;
	    set<pair<long long int , string > > st ;
	    for(i = 0 ; i < n ; i++) {
	        in >> s[0] >> s[1] ;
	        if(s[1] == "posted") {
                for(j = 2 ; j < 5 ; j++) {
                    in >> s[j] ;
                }
                if(s[0] == name) {
                    mp[s[3].substr(0 , s[3].size() - 2)] += 15 ;
                }
                else if(s[3].substr(0 , s[3].size() - 2) == name) {
                    mp[s[0]] += 15 ;
                }
                else {
                    mp[s[0]] += 0 ;
                    mp[s[3].substr(0 , s[3].size() - 2)] += 0 ;
                }
	        }
	        else if(s[1] == "commented") {
                for(j = 2 ; j < 5 ; j++) {
                    in >> s[j] ;
                }
                if(s[0] == name) {
                    mp[s[3].substr(0 , s[3].size() - 2)] += 10 ;
                }
                else if(s[3].substr(0 , s[3].size() - 2) == name) {
                    mp[s[0]] += 10 ;
                }
                else {
                    mp[s[0]] += 0 ;
                    mp[s[3].substr(0 , s[3].size() - 2)] += 0 ;
                }
	        }
	        else {
                for(j = 2 ; j < 4 ; j++) {
                    in >> s[j] ;
                }
                if(s[0] == name) {
                    mp[s[2].substr(0 , s[2].size() - 2)] += 5 ;
                }
                else if(s[2].substr(0 , s[2].size() - 2) == name) {
                    mp[s[0]] += 5 ;
                }
                else {
                    mp[s[0]] += 0 ;
                    mp[s[2].substr(0 , s[2].size() - 2)] += 0 ;
                }
	        }
 	    }
	    vector<pair<long long int , string > > v ;
        for(auto x : mp) {
            v.push_back({x.second , x.first}) ;
        }
        sort(v.begin() , v.end() , sortbysec) ;
        for(i = 0 ; i < v.size() ; i++) {
            out << v[i].second << "\n" ;
        }
	}
};


int main() {
	BFacetookPriorityWall solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
