/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author jignesh1604
 * Link   :   https://codeforces.com/contest/230/problem/B
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BTPrimes {
public:
    vector<bool> isprime ;
    void SieveOfEratosthenes(long long int n)
    {
        isprime[0] = isprime[1] = false;
        for (long long int i=2; i<=n; i++)
            isprime[i] = true;

        for (int p=2; p*p<=n; p++)
        {
            if (isprime[p] == true)
            {
                for (int i=p*p; i<=n; i += p)
                    isprime[i] = false;
            }
        }
    }
	void solve(std::istream& in, std::ostream& out) {
        isprime = vector<bool> (2000001) ;
        SieveOfEratosthenes(2000000) ;
        long long int n , i , x;
        in >> n ;
        for(i = 0; i < n ; i++) {
            in >> x ;
            if((long long int)sqrt(x)*(long long int)sqrt(x) == x && isprime[(long long int)sqrt(x)] == true) {
                out << "YES\n" ;
            }
            else {
                out << "NO\n" ;
            }
        }
	}
};


int main() {
	BTPrimes solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
